/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/MSHR-Dec/MSHR-Doc/k8s/crd/code_generator/pkg/apis/myfirstcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MineLister helps list Mines.
// All objects returned here must be treated as read-only.
type MineLister interface {
	// List lists all Mines in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Mine, err error)
	// Mines returns an object that can list and get Mines.
	Mines(namespace string) MineNamespaceLister
	MineListerExpansion
}

// mineLister implements the MineLister interface.
type mineLister struct {
	indexer cache.Indexer
}

// NewMineLister returns a new MineLister.
func NewMineLister(indexer cache.Indexer) MineLister {
	return &mineLister{indexer: indexer}
}

// List lists all Mines in the indexer.
func (s *mineLister) List(selector labels.Selector) (ret []*v1alpha1.Mine, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Mine))
	})
	return ret, err
}

// Mines returns an object that can list and get Mines.
func (s *mineLister) Mines(namespace string) MineNamespaceLister {
	return mineNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MineNamespaceLister helps list and get Mines.
// All objects returned here must be treated as read-only.
type MineNamespaceLister interface {
	// List lists all Mines in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Mine, err error)
	// Get retrieves the Mine from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Mine, error)
	MineNamespaceListerExpansion
}

// mineNamespaceLister implements the MineNamespaceLister
// interface.
type mineNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Mines in the indexer for a given namespace.
func (s mineNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Mine, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Mine))
	})
	return ret, err
}

// Get retrieves the Mine from the indexer for a given namespace and name.
func (s mineNamespaceLister) Get(name string) (*v1alpha1.Mine, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mine"), name)
	}
	return obj.(*v1alpha1.Mine), nil
}
