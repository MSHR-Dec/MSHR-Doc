/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "../crd/pkg/apis/myfirstcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyFirstControllerLister helps list MyFirstControllers.
// All objects returned here must be treated as read-only.
type MyFirstControllerLister interface {
	// List lists all MyFirstControllers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyFirstController, err error)
	// MyFirstControllers returns an object that can list and get MyFirstControllers.
	MyFirstControllers(namespace string) MyFirstControllerNamespaceLister
	MyFirstControllerListerExpansion
}

// myFirstControllerLister implements the MyFirstControllerLister interface.
type myFirstControllerLister struct {
	indexer cache.Indexer
}

// NewMyFirstControllerLister returns a new MyFirstControllerLister.
func NewMyFirstControllerLister(indexer cache.Indexer) MyFirstControllerLister {
	return &myFirstControllerLister{indexer: indexer}
}

// List lists all MyFirstControllers in the indexer.
func (s *myFirstControllerLister) List(selector labels.Selector) (ret []*v1alpha1.MyFirstController, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyFirstController))
	})
	return ret, err
}

// MyFirstControllers returns an object that can list and get MyFirstControllers.
func (s *myFirstControllerLister) MyFirstControllers(namespace string) MyFirstControllerNamespaceLister {
	return myFirstControllerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyFirstControllerNamespaceLister helps list and get MyFirstControllers.
// All objects returned here must be treated as read-only.
type MyFirstControllerNamespaceLister interface {
	// List lists all MyFirstControllers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyFirstController, err error)
	// Get retrieves the MyFirstController from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MyFirstController, error)
	MyFirstControllerNamespaceListerExpansion
}

// myFirstControllerNamespaceLister implements the MyFirstControllerNamespaceLister
// interface.
type myFirstControllerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyFirstControllers in the indexer for a given namespace.
func (s myFirstControllerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MyFirstController, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyFirstController))
	})
	return ret, err
}

// Get retrieves the MyFirstController from the indexer for a given namespace and name.
func (s myFirstControllerNamespaceLister) Get(name string) (*v1alpha1.MyFirstController, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("myfirstcontroller"), name)
	}
	return obj.(*v1alpha1.MyFirstController), nil
}
